
// Three clock sketches for the Ardcore Expander
// Feed a clock in "Clock in" and set A0 full CCW for "Cycle Program", at noon for "Halves Program" or full CW for "Divider Program".
// A2 controls probablility of output for triggers. Set A2 full CCW for no randomization and turn it CW for increased "drop out" of trig outs. 
// There is a 1 second signal as the program is changed.
// Written by: Magnus Gyllensward
//
// Next revision: Randomization

const int clkIn = 2;           // the digital (clock) input
const int digPin[2] = {3,4};  // the digital output pins
const int pinOffset = 5;       // the first DAC pin (from 5-12)
const int trigTime = 10;       // triggers are 10 ms.

//  variables for interrupt handling of the clock input
volatile int clkState = LOW;

int cycleCounter = 0;
int dividerCounter = 1;

int halvesCounter = 1;
int halves[8] = {1, 2, 4, 8, 16, 32, 64, 128};

//int indicator1 = 0;
//int indicator2 = 0;
//int indicator3 = 0;

int indicator[3] = {0,0,0};

// program controlled with A0 e.g. program 1 = from 0 to 300.
int program1 = 300;
int program2 = 600;
int program3 = 9999;

int randValue = 1023;

// Functions
void programChangeSignal(int x) {    
  if (indicator[x-1] == 0) { 
    for (int i=0; i<8; i++) { 
      pinMode(pinOffset+i, OUTPUT); digitalWrite(pinOffset+i, HIGH);
    }
    delay(1000); 
    for (int i=0; i<8; i++) { 
      pinMode(pinOffset+i, OUTPUT); digitalWrite(pinOffset+i, LOW);
    }
  }
  for (int y=0; y<3; y++) {
    indicator[y] = 0;
  }
  indicator[x-1] = 1; 
}


//  ==================== start of setup() ======================

void setup() {
  Serial.begin(9600);
  
  // set up the digital (clock) input
  pinMode(clkIn, INPUT);
  
  // set up the digital outputs
  for (int i=0; i<2; i++) {
    pinMode(digPin[i], OUTPUT);
    digitalWrite(digPin[i], LOW);
  }
  
  // set up the 8-bit DAC output pins
  for (int i=0; i<8; i++) {
    pinMode(pinOffset+i, OUTPUT);
    digitalWrite(pinOffset+i, LOW);
  }
  
  attachInterrupt(0, isr, RISING);
}

//  ==================== start of loop() =======================
void loop() {

  if (clkState == HIGH) {
    clkState = LOW;  // reset for the next clock
   
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //   Cycle (program 1)
    //
        
    if (analogRead(0) < program1) {
     
     programChangeSignal(1);
        
      for(int i=0; i<8; i++) {
        if (cycleCounter==i) {
          Serial.print("Step through: ");  Serial.println(i);  
          randValue = random(0, 1023);

          if (randValue > analogRead(2)) {
            digitalWrite(pinOffset+i, HIGH);
            delay(1); // to let the LED's show
            digitalWrite(pinOffset+i, LOW);
          }
        }
      }
      
      if (cycleCounter<7) { 
        cycleCounter++;
      }
      
      else {
        cycleCounter=0;
      }
      
    } // Program 1
       
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //   Halves (Program 2)  
    //
    
     if (analogRead(0) > (program1+1) && analogRead(0) < program2) {  
     
      programChangeSignal(2);
    
       for (int i=0; i<128; i++) {
        
        for (int x=0; x<8; x++) {
          if ((halvesCounter) % halves[x] == 0) { 
          randValue = random(0, 1023);
          
            if (randValue > analogRead(2)) {                   
              digitalWrite(pinOffset+x, HIGH);
            }
          } 
        } 
       for (int i=0; i<8; i++) {
        digitalWrite(pinOffset+i, LOW);
       }
     }
              
      if (halvesCounter<128) { 
        halvesCounter++;
      }
      
      else {
        halvesCounter=1;
      }
    } // Program 2
     
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //   Divider (Program 3)   
    
    
    if (analogRead(0) > (program2+1) && analogRead(0) < program3) {  // knob setting to tune in program
    
      programChangeSignal(3);
    
      for (int i=1; i<9; i++) {
        if (dividerCounter % i == 0) { 
          randValue = random(0, 1023);
          if (randValue > analogRead(2)) {     
            digitalWrite(pinOffset+(i-1), HIGH);
            delay(1); // to let the LED's show
            digitalWrite(pinOffset+(i-1), LOW);
          }
        }
      }  
    
      dividerCounter++;
      
    } // program 3
  } // end if clock state high
} // end loop

//  =================== convenience routines ===================
//  isr() - quickly handle interrupts from the clock input
//  ------------------------------------------------------
void isr()
{
  // Note: you don't want to spend a lot of time here, because
  // it interrupts the activity of the rest of your program.
  // In most cases, you just want to set a variable and get
  // out.
  clkState = HIGH;
}

//  dacOutput(byte) - deal with the DAC output
//  -----------------------------------------
void dacOutput(byte v)
{
  PORTB = (PORTB & B11100000) | (v >> 3);
	PORTD = (PORTD & B00011111) | ((v & B00000111) << 5);
}

//  ===================== end of program =======================
